// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "btnenh.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "SurfaceColor.h"
#include "TextDescriptor.h"
#include "texture.h"
#include "CellsManager.h"

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh

IMPLEMENT_DYNCREATE(CBtnEnh, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh properties

CString CBtnEnh::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

long CBtnEnh::GetShape()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShape(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CBtnEnh::GetSlant()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSlant(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CBtnEnh::GetSurface()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSurface(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

unsigned long CBtnEnh::GetPictureTranspColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureTranspColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

CString CBtnEnh::GetSoundDown()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundDown(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundUp()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundUp(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CBtnEnh::GetCursor()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetCursor(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundMouseOver()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundMouseOver(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundMouseOut()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundMouseOut(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

COleFont CBtnEnh::GetFontTextLT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLT(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextCT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCT(LPDISPATCH propVal)
{
	SetProperty(0x11, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x12, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRT(LPDISPATCH propVal)
{
	SetProperty(0x12, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextLM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x13, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLM(LPDISPATCH propVal)
{
	SetProperty(0x13, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x14, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRM(LPDISPATCH propVal)
{
	SetProperty(0x14, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextLB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x15, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLB(LPDISPATCH propVal)
{
	SetProperty(0x15, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextCB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x16, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCB(LPDISPATCH propVal)
{
	SetProperty(0x16, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRB(LPDISPATCH propVal)
{
	SetProperty(0x17, VT_DISPATCH, propVal);
}

CString CBtnEnh::GetPicture()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPicture(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CBtnEnh::GetPicturePressed()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPicturePressed(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CBtnEnh::GetPictureMouseOver()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureMouseOver(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CBtnEnh::GetPictureCustom()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureCustom(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CBtnEnh::GetPicturePosition()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPicturePosition(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

short CBtnEnh::GetPictureXOffset()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureXOffset(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

short CBtnEnh::GetPictureYOffset()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureYOffset(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

BOOL CBtnEnh::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

long CBtnEnh::GetPictureTranspMode()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureTranspMode(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorContainer()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorContainer(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CBtnEnh::GetMovePictureOnPress()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetMovePictureOnPress(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

short CBtnEnh::GetButtonRaiseFactor()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetButtonRaiseFactor(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

unsigned long CBtnEnh::GetHighlightColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetHighlightColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

unsigned long CBtnEnh::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

BOOL CBtnEnh::GetButtonCustomFitPicture()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetButtonCustomFitPicture(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

OLE_HANDLE CBtnEnh::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont CBtnEnh::GetFontTextCaption()
{
	LPDISPATCH pDispatch;
	GetProperty(0x23, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCaption(LPDISPATCH propVal)
{
	SetProperty(0x23, VT_DISPATCH, propVal);
}

CString CBtnEnh::GetHyperlink()
{
	CString result;
	GetProperty(0x24, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetHyperlink(LPCTSTR propVal)
{
	SetProperty(0x24, VT_BSTR, propVal);
}

BOOL CBtnEnh::GetEnableInternetLoadAtDT()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetEnableInternetLoadAtDT(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

long CBtnEnh::GetSmoothEdges()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSmoothEdges(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

CString CBtnEnh::GetTagEx()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetTagEx(LPCTSTR propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}

BOOL CBtnEnh::GetPictureKeepRatio()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureKeepRatio(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

long CBtnEnh::GetFocusMode()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFocusMode(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CBtnEnh::GetSpecialEffect()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpecialEffect(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

short CBtnEnh::GetCaptionWordWrapPerc()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetCaptionWordWrapPerc(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

short CBtnEnh::GetOptimization()
{
	short result;
	GetProperty(0x2b, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetOptimization(short propVal)
{
	SetProperty(0x2b, VT_I2, propVal);
}

BOOL CBtnEnh::GetClickable()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetClickable(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

unsigned long CBtnEnh::GetBackColor()
{
	unsigned long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColor(unsigned long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

BOOL CBtnEnh::GetIgnoreSpaceBar()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetIgnoreSpaceBar(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

long CBtnEnh::GetSpecialEffectFactor()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpecialEffectFactor(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColorDisabled()
{
	unsigned long result;
	GetProperty(0x4f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorDisabled(unsigned long propVal)
{
	SetProperty(0x4f, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorDisabled()
{
	unsigned long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorDisabled(unsigned long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorMouseOver()
{
	unsigned long result;
	GetProperty(0x51, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorMouseOver(unsigned long propVal)
{
	SetProperty(0x51, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorFocus()
{
	unsigned long result;
	GetProperty(0x52, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorFocus(unsigned long propVal)
{
	SetProperty(0x52, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorInterior()
{
	unsigned long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorInterior(unsigned long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColorMouseOver()
{
	unsigned long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorMouseOver(unsigned long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

long CBtnEnh::GetFlatPillowFactor()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFlatPillowFactor(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CBtnEnh::GetShadowMode()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShadowMode(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

long CBtnEnh::GetStyle()
{
	long result;
	GetProperty(0x5f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetStyle(long propVal)
{
	SetProperty(0x5f, VT_I4, propVal);
}

CString CBtnEnh::GetPictureDisabled()
{
	CString result;
	GetProperty(0x60, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureDisabled(LPCTSTR propVal)
{
	SetProperty(0x60, VT_BSTR, propVal);
}

unsigned long CBtnEnh::GetForeColorPressed()
{
	unsigned long result;
	GetProperty(0x61, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorPressed(unsigned long propVal)
{
	SetProperty(0x61, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorPressed()
{
	unsigned long result;
	GetProperty(0x62, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorPressed(unsigned long propVal)
{
	SetProperty(0x62, VT_I4, propVal);
}

short CBtnEnh::GetValue()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetValue(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

long CBtnEnh::GetOrientation()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOrientation(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfaceNormal()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6d, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfaceNormal(LPDISPATCH propVal)
{
	SetProperty(0x6d, VT_DISPATCH, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfaceMO()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6e, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfaceMO(LPDISPATCH propVal)
{
	SetProperty(0x6e, VT_DISPATCH, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfaceInternal()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6f, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfaceInternal(LPDISPATCH propVal)
{
	SetProperty(0x6f, VT_DISPATCH, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfaceFocus()
{
	LPDISPATCH pDispatch;
	GetProperty(0x70, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfaceFocus(LPDISPATCH propVal)
{
	SetProperty(0x70, VT_DISPATCH, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfaceDisabled()
{
	LPDISPATCH pDispatch;
	GetProperty(0x71, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfaceDisabled(LPDISPATCH propVal)
{
	SetProperty(0x71, VT_DISPATCH, propVal);
}

CSurfaceColor CBtnEnh::GetColorSurfacePressed()
{
	LPDISPATCH pDispatch;
	GetProperty(0x72, VT_DISPATCH, (void*)&pDispatch);
	return CSurfaceColor(pDispatch);
}

void CBtnEnh::SetColorSurfacePressed(LPDISPATCH propVal)
{
	SetProperty(0x72, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrCaption()
{
	LPDISPATCH pDispatch;
	GetProperty(0x73, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrCaption(LPDISPATCH propVal)
{
	SetProperty(0x73, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrLT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x74, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrLT(LPDISPATCH propVal)
{
	SetProperty(0x74, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrCT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x75, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrCT(LPDISPATCH propVal)
{
	SetProperty(0x75, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrRT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x76, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrRT(LPDISPATCH propVal)
{
	SetProperty(0x76, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrLM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x77, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrLM(LPDISPATCH propVal)
{
	SetProperty(0x77, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrRM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x78, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrRM(LPDISPATCH propVal)
{
	SetProperty(0x78, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrLB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x79, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrLB(LPDISPATCH propVal)
{
	SetProperty(0x79, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrCB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7a, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrCB(LPDISPATCH propVal)
{
	SetProperty(0x7a, VT_DISPATCH, propVal);
}

CTextDescriptor CBtnEnh::GetTextDescrRB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7b, VT_DISPATCH, (void*)&pDispatch);
	return CTextDescriptor(pDispatch);
}

void CBtnEnh::SetTextDescrRB(LPDISPATCH propVal)
{
	SetProperty(0x7b, VT_DISPATCH, propVal);
}

CTexture CBtnEnh::GetTextureSurface()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7c, VT_DISPATCH, (void*)&pDispatch);
	return CTexture(pDispatch);
}

void CBtnEnh::SetTextureSurface(LPDISPATCH propVal)
{
	SetProperty(0x7c, VT_DISPATCH, propVal);
}

long CBtnEnh::GetFrameEffect()
{
	long result;
	GetProperty(0x7f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFrameEffect(long propVal)
{
	SetProperty(0x7f, VT_I4, propVal);
}

BOOL CBtnEnh::GetOptionGroupDelimiter()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetOptionGroupDelimiter(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

BOOL CBtnEnh::GetPictureVisible()
{
	BOOL result;
	GetProperty(0x83, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureVisible(BOOL propVal)
{
	SetProperty(0x83, VT_BOOL, propVal);
}

long CBtnEnh::GetTextCaptionAlignment()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetTextCaptionAlignment(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}

short CBtnEnh::GetSpotlightOffsetX()
{
	short result;
	GetProperty(0x8d, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightOffsetX(short propVal)
{
	SetProperty(0x8d, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightOffsetY()
{
	short result;
	GetProperty(0x8e, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightOffsetY(short propVal)
{
	SetProperty(0x8e, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightResizeWidth()
{
	short result;
	GetProperty(0x8f, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightResizeWidth(short propVal)
{
	SetProperty(0x8f, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightResizeHeight()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightResizeHeight(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

short CBtnEnh::GetCornerFactor()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetCornerFactor(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

BOOL CBtnEnh::GetUseAntialias()
{
	BOOL result;
	GetProperty(0x92, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetUseAntialias(BOOL propVal)
{
	SetProperty(0x92, VT_BOOL, propVal);
}

CCellsManager CBtnEnh::GetCellsManager()
{
	LPDISPATCH pDispatch;
	GetProperty(0xab, VT_DISPATCH, (void*)&pDispatch);
	return CCellsManager(pDispatch);
}

void CBtnEnh::SetCellsManager(LPDISPATCH propVal)
{
	SetProperty(0xab, VT_DISPATCH, propVal);
}

BOOL CBtnEnh::GetHollowFrame()
{
	BOOL result;
	GetProperty(0xaf, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetHollowFrame(BOOL propVal)
{
	SetProperty(0xaf, VT_BOOL, propVal);
}

long CBtnEnh::GetLightDirection()
{
	long result;
	GetProperty(0xb0, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetLightDirection(long propVal)
{
	SetProperty(0xb0, VT_I4, propVal);
}

BOOL CBtnEnh::GetSpotlightVisible()
{
	BOOL result;
	GetProperty(0xb1, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightVisible(BOOL propVal)
{
	SetProperty(0xb1, VT_BOOL, propVal);
}

unsigned long CBtnEnh::GetSpotlightColor()
{
	unsigned long result;
	GetProperty(0xb2, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightColor(unsigned long propVal)
{
	SetProperty(0xb2, VT_I4, propVal);
}

short CBtnEnh::GetPictureTranspFactor()
{
	short result;
	GetProperty(0xb3, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureTranspFactor(short propVal)
{
	SetProperty(0xb3, VT_I2, propVal);
}

short CBtnEnh::GetShapeHeadFactor()
{
	short result;
	GetProperty(0xb4, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetShapeHeadFactor(short propVal)
{
	SetProperty(0xb4, VT_I2, propVal);
}

short CBtnEnh::GetShapeLineFactor()
{
	short result;
	GetProperty(0xb5, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetShapeLineFactor(short propVal)
{
	SetProperty(0xb5, VT_I2, propVal);
}

short CBtnEnh::GetSurfaceTransparentFactor()
{
	short result;
	GetProperty(0xb8, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSurfaceTransparentFactor(short propVal)
{
	SetProperty(0xb8, VT_I2, propVal);
}

BOOL CBtnEnh::GetRectHardEdges()
{
	BOOL result;
	GetProperty(0xbb, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetRectHardEdges(BOOL propVal)
{
	SetProperty(0xbb, VT_BOOL, propVal);
}

BOOL CBtnEnh::GetSwapEffectsColors()
{
	BOOL result;
	GetProperty(0xbc, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetSwapEffectsColors(BOOL propVal)
{
	SetProperty(0xbc, VT_BOOL, propVal);
}

long CBtnEnh::GetSurfaceTransparentZone()
{
	long result;
	GetProperty(0xbd, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSurfaceTransparentZone(long propVal)
{
	SetProperty(0xbd, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEffectUpper()
{
	unsigned long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEffectUpper(unsigned long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEffectUpper()
{
	short result;
	GetProperty(0xc2, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEffectUpper(short propVal)
{
	SetProperty(0xc2, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEffectLower()
{
	unsigned long result;
	GetProperty(0xc3, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEffectLower(unsigned long propVal)
{
	SetProperty(0xc3, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEffectLower()
{
	short result;
	GetProperty(0xc4, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEffectLower(short propVal)
{
	SetProperty(0xc4, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorOuterBorder()
{
	unsigned long result;
	GetProperty(0xc5, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorOuterBorder(unsigned long propVal)
{
	SetProperty(0xc5, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorInnerBorder()
{
	unsigned long result;
	GetProperty(0xc6, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorInnerBorder(unsigned long propVal)
{
	SetProperty(0xc6, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorInnerBorderPressed()
{
	unsigned long result;
	GetProperty(0xc7, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorInnerBorderPressed(unsigned long propVal)
{
	SetProperty(0xc7, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorMiddleBorder()
{
	unsigned long result;
	GetProperty(0xc8, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorMiddleBorder(unsigned long propVal)
{
	SetProperty(0xc8, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEmphUpper()
{
	unsigned long result;
	GetProperty(0xc9, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEmphUpper(unsigned long propVal)
{
	SetProperty(0xc9, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEmphUpper()
{
	short result;
	GetProperty(0xca, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEmphUpper(short propVal)
{
	SetProperty(0xca, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEmphLower()
{
	unsigned long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEmphLower(unsigned long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEmphLower()
{
	short result;
	GetProperty(0xcc, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEmphLower(short propVal)
{
	SetProperty(0xcc, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEmphUpperPressed()
{
	unsigned long result;
	GetProperty(0xcd, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEmphUpperPressed(unsigned long propVal)
{
	SetProperty(0xcd, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEmphUpperPressed()
{
	short result;
	GetProperty(0xce, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEmphUpperPressed(short propVal)
{
	SetProperty(0xce, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlossyEmphLowerPressed()
{
	unsigned long result;
	GetProperty(0xcf, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlossyEmphLowerPressed(unsigned long propVal)
{
	SetProperty(0xcf, VT_I4, propVal);
}

short CBtnEnh::GetVistaOpacityGlossyEmphLowerPressed()
{
	short result;
	GetProperty(0xd0, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOpacityGlossyEmphLowerPressed(short propVal)
{
	SetProperty(0xd0, VT_I2, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlowBack()
{
	unsigned long result;
	GetProperty(0xd1, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlowBack(unsigned long propVal)
{
	SetProperty(0xd1, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlow()
{
	unsigned long result;
	GetProperty(0xd2, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlow(unsigned long propVal)
{
	SetProperty(0xd2, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlowChecked()
{
	unsigned long result;
	GetProperty(0xd3, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlowChecked(unsigned long propVal)
{
	SetProperty(0xd3, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlowCheckedMouseOver()
{
	unsigned long result;
	GetProperty(0xd4, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlowCheckedMouseOver(unsigned long propVal)
{
	SetProperty(0xd4, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorBackgroundChecked()
{
	unsigned long result;
	GetProperty(0xd5, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorBackgroundChecked(unsigned long propVal)
{
	SetProperty(0xd5, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorBackgroundCheckedMouseOver()
{
	unsigned long result;
	GetProperty(0xd6, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorBackgroundCheckedMouseOver(unsigned long propVal)
{
	SetProperty(0xd6, VT_I4, propVal);
}

long CBtnEnh::GetVistaLook()
{
	long result;
	GetProperty(0xd7, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaLook(long propVal)
{
	SetProperty(0xd7, VT_I4, propVal);
}

long CBtnEnh::GetVistaGlossyShape()
{
	long result;
	GetProperty(0xd8, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaGlossyShape(long propVal)
{
	SetProperty(0xd8, VT_I4, propVal);
}

short CBtnEnh::GetVistaGlossySmoothFactor()
{
	short result;
	GetProperty(0xd9, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaGlossySmoothFactor(short propVal)
{
	SetProperty(0xd9, VT_I2, propVal);
}

long CBtnEnh::GetSpotlightType()
{
	long result;
	GetProperty(0xda, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightType(long propVal)
{
	SetProperty(0xda, VT_I4, propVal);
}

BOOL CBtnEnh::GetPictureReflectivityEnabled()
{
	BOOL result;
	GetProperty(0xdb, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureReflectivityEnabled(BOOL propVal)
{
	SetProperty(0xdb, VT_BOOL, propVal);
}

short CBtnEnh::GetPictureReflectivityPerc()
{
	short result;
	GetProperty(0xdc, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureReflectivityPerc(short propVal)
{
	SetProperty(0xdc, VT_I2, propVal);
}

short CBtnEnh::GetPictureReflectHeightPerc()
{
	short result;
	GetProperty(0xdd, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureReflectHeightPerc(short propVal)
{
	SetProperty(0xdd, VT_I2, propVal);
}

long CBtnEnh::GetProgressBarType()
{
	long result;
	GetProperty(0xdf, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarType(long propVal)
{
	SetProperty(0xdf, VT_I4, propVal);
}

long CBtnEnh::GetProgressBarMin()
{
	long result;
	GetProperty(0xe0, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarMin(long propVal)
{
	SetProperty(0xe0, VT_I4, propVal);
}

long CBtnEnh::GetProgressBarMax()
{
	long result;
	GetProperty(0xe1, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarMax(long propVal)
{
	SetProperty(0xe1, VT_I4, propVal);
}

long CBtnEnh::GetProgressBarValue()
{
	long result;
	GetProperty(0xe2, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarValue(long propVal)
{
	SetProperty(0xe2, VT_I4, propVal);
}

unsigned long CBtnEnh::GetProgressBarColor()
{
	unsigned long result;
	GetProperty(0xe3, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarColor(unsigned long propVal)
{
	SetProperty(0xe3, VT_I4, propVal);
}

long CBtnEnh::GetProgressBarFillMode()
{
	long result;
	GetProperty(0xe4, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetProgressBarFillMode(long propVal)
{
	SetProperty(0xe4, VT_I4, propVal);
}

unsigned long CBtnEnh::GetVistaColorGlowBottom()
{
	unsigned long result;
	GetProperty(0xe5, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaColorGlowBottom(unsigned long propVal)
{
	SetProperty(0xe5, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorInnerBorder()
{
	unsigned long result;
	GetProperty(0xe6, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorInnerBorder(unsigned long propVal)
{
	SetProperty(0xe6, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorOuterBorder()
{
	unsigned long result;
	GetProperty(0xe7, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorOuterBorder(unsigned long propVal)
{
	SetProperty(0xe7, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthTop()
{
	unsigned long result;
	GetProperty(0xe8, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthTop(unsigned long propVal)
{
	SetProperty(0xe8, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthBottom()
{
	unsigned long result;
	GetProperty(0xe9, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthBottom(unsigned long propVal)
{
	SetProperty(0xe9, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthTop()
{
	unsigned long result;
	GetProperty(0xea, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthTop(unsigned long propVal)
{
	SetProperty(0xea, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthBottom()
{
	unsigned long result;
	GetProperty(0xeb, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthBottom(unsigned long propVal)
{
	SetProperty(0xeb, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorInnerBorderMouseOver()
{
	unsigned long result;
	GetProperty(0xec, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorInnerBorderMouseOver(unsigned long propVal)
{
	SetProperty(0xec, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorOuterBorderMouseOver()
{
	unsigned long result;
	GetProperty(0xed, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorOuterBorderMouseOver(unsigned long propVal)
{
	SetProperty(0xed, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthTopMouseOver()
{
	unsigned long result;
	GetProperty(0xee, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthTopMouseOver(unsigned long propVal)
{
	SetProperty(0xee, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthBottomMouseOver()
{
	unsigned long result;
	GetProperty(0xef, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthBottomMouseOver(unsigned long propVal)
{
	SetProperty(0xef, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthTopMouseOver()
{
	unsigned long result;
	GetProperty(0xf0, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthTopMouseOver(unsigned long propVal)
{
	SetProperty(0xf0, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthBottomMouseOver()
{
	unsigned long result;
	GetProperty(0xf1, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthBottomMouseOver(unsigned long propVal)
{
	SetProperty(0xf1, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorInnerBorderPressed()
{
	unsigned long result;
	GetProperty(0xf2, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorInnerBorderPressed(unsigned long propVal)
{
	SetProperty(0xf2, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorOuterBorderPressed()
{
	unsigned long result;
	GetProperty(0xf3, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorOuterBorderPressed(unsigned long propVal)
{
	SetProperty(0xf3, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthTopPressed()
{
	unsigned long result;
	GetProperty(0xf4, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthTopPressed(unsigned long propVal)
{
	SetProperty(0xf4, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorNorthBottomPressed()
{
	unsigned long result;
	GetProperty(0xf5, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorNorthBottomPressed(unsigned long propVal)
{
	SetProperty(0xf5, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthTopPressed()
{
	unsigned long result;
	GetProperty(0xf6, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthTopPressed(unsigned long propVal)
{
	SetProperty(0xf6, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2007ColorSouthBottomPressed()
{
	unsigned long result;
	GetProperty(0xf7, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007ColorSouthBottomPressed(unsigned long propVal)
{
	SetProperty(0xf7, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorNorth()
{
	unsigned long result;
	GetProperty(0xf8, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorNorth(unsigned long propVal)
{
	SetProperty(0xf8, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorSouth()
{
	unsigned long result;
	GetProperty(0xf9, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorSouth(unsigned long propVal)
{
	SetProperty(0xf9, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorBorder()
{
	unsigned long result;
	GetProperty(0xfa, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorBorder(unsigned long propVal)
{
	SetProperty(0xfa, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorNorthMouseOver()
{
	unsigned long result;
	GetProperty(0xfb, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorNorthMouseOver(unsigned long propVal)
{
	SetProperty(0xfb, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorSouthMouseOver()
{
	unsigned long result;
	GetProperty(0xfc, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorSouthMouseOver(unsigned long propVal)
{
	SetProperty(0xfc, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorBorderMouseOver()
{
	unsigned long result;
	GetProperty(0xfd, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorBorderMouseOver(unsigned long propVal)
{
	SetProperty(0xfd, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorNorthPressed()
{
	unsigned long result;
	GetProperty(0xfe, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorNorthPressed(unsigned long propVal)
{
	SetProperty(0xfe, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorSouthPressed()
{
	unsigned long result;
	GetProperty(0xff, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorSouthPressed(unsigned long propVal)
{
	SetProperty(0xff, VT_I4, propVal);
}

unsigned long CBtnEnh::GetOffice2003ColorBorderPressed()
{
	unsigned long result;
	GetProperty(0x100, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003ColorBorderPressed(unsigned long propVal)
{
	SetProperty(0x100, VT_I4, propVal);
}

BOOL CBtnEnh::GetToolTipEnabled()
{
	BOOL result;
	GetProperty(0x101, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetToolTipEnabled(BOOL propVal)
{
	SetProperty(0x101, VT_BOOL, propVal);
}

CString CBtnEnh::GetToolTipTextNormal()
{
	CString result;
	GetProperty(0x102, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetToolTipTextNormal(LPCTSTR propVal)
{
	SetProperty(0x102, VT_BSTR, propVal);
}

CString CBtnEnh::GetToolTipTextChecked()
{
	CString result;
	GetProperty(0x103, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetToolTipTextChecked(LPCTSTR propVal)
{
	SetProperty(0x103, VT_BSTR, propVal);
}

short CBtnEnh::GetVistaOuterBorderWidth()
{
	short result;
	GetProperty(0x104, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaOuterBorderWidth(short propVal)
{
	SetProperty(0x104, VT_I2, propVal);
}

short CBtnEnh::GetVistaMiddleBorderWidth()
{
	short result;
	GetProperty(0x105, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaMiddleBorderWidth(short propVal)
{
	SetProperty(0x105, VT_I2, propVal);
}

short CBtnEnh::GetVistaInnerBorderWidth()
{
	short result;
	GetProperty(0x106, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetVistaInnerBorderWidth(short propVal)
{
	SetProperty(0x106, VT_I2, propVal);
}

short CBtnEnh::GetOffice2007OuterBorderWidth()
{
	short result;
	GetProperty(0x107, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007OuterBorderWidth(short propVal)
{
	SetProperty(0x107, VT_I2, propVal);
}

short CBtnEnh::GetOffice2007InnerBorderWidth()
{
	short result;
	GetProperty(0x108, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2007InnerBorderWidth(short propVal)
{
	SetProperty(0x108, VT_I2, propVal);
}

short CBtnEnh::GetOffice2003BorderWidth()
{
	short result;
	GetProperty(0x109, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetOffice2003BorderWidth(short propVal)
{
	SetProperty(0x109, VT_I2, propVal);
}

CString CBtnEnh::GetSplitButtonPicture()
{
	CString result;
	GetProperty(0x10a, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonPicture(LPCTSTR propVal)
{
	SetProperty(0x10a, VT_BSTR, propVal);
}

long CBtnEnh::GetSplitButtonType()
{
	long result;
	GetProperty(0x10b, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonType(long propVal)
{
	SetProperty(0x10b, VT_I4, propVal);
}

short CBtnEnh::GetSplitButtonArrowOffsetX()
{
	short result;
	GetProperty(0x10c, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonArrowOffsetX(short propVal)
{
	SetProperty(0x10c, VT_I2, propVal);
}

short CBtnEnh::GetSplitButtonArrowOffsetY()
{
	short result;
	GetProperty(0x10d, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonArrowOffsetY(short propVal)
{
	SetProperty(0x10d, VT_I2, propVal);
}

unsigned long CBtnEnh::GetSplitButtonArrowColor()
{
	unsigned long result;
	GetProperty(0x10e, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonArrowColor(unsigned long propVal)
{
	SetProperty(0x10e, VT_I4, propVal);
}

unsigned long CBtnEnh::GetSplitButtonHighlightColor()
{
	unsigned long result;
	GetProperty(0x10f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonHighlightColor(unsigned long propVal)
{
	SetProperty(0x10f, VT_I4, propVal);
}

unsigned long CBtnEnh::GetSplitButtonShadowColor()
{
	unsigned long result;
	GetProperty(0x110, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonShadowColor(unsigned long propVal)
{
	SetProperty(0x110, VT_I4, propVal);
}

short CBtnEnh::GetSplitButtonSizePerc()
{
	short result;
	GetProperty(0x111, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSplitButtonSizePerc(short propVal)
{
	SetProperty(0x111, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh operations

void CBtnEnh::EnableSound(short nSound, BOOL bEnable)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSound, bEnable);
}

void CBtnEnh::DoClick()
{
	InvokeHelper(DISPID_DOCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh::SetNSContainerColor(unsigned long Color)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Color);
}

long CBtnEnh::SetPictureFromHandle(long index, long hBmp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, hBmp);
	return result;
}

long CBtnEnh::SetPictureFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh::SetAnimFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh::SetCursorFromHandle(long hCursor)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hCursor);
	return result;
}

long CBtnEnh::SetSoundFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

void CBtnEnh::SetAutomaticRefresh(BOOL bAutoRefresh)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bAutoRefresh);
}

void CBtnEnh::SetSoundSync(long sound, BOOL flag)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 sound, flag);
}

void CBtnEnh::EnableAcceleratorForVB()
{
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CBtnEnh::SetPictureFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

long CBtnEnh::SetSoundFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

BOOL CBtnEnh::SetAnimFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

void CBtnEnh::MouseCapture(BOOL bCapture)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bCapture);
}

BOOL CBtnEnh::ExportBtnImage(long nImage, LPCTSTR strFilename, long nFormat)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nImage, strFilename, nFormat);
	return result;
}

short CBtnEnh::LoadTemplate(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::SaveTemplate(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::LoadTemplateEx(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::SaveTemplateEx(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

void CBtnEnh::SetHelpLink(short nPage, LPCTSTR strLink)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nPage, strLink);
}

void CBtnEnh::SetTemplateBinDir(long nType, LPCTSTR strDirPath)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nType, strDirPath);
}

CString CBtnEnh::GetHelperString(short dispid, short nValue)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		dispid, nValue);
	return result;
}

void CBtnEnh::ResetProperties()
{
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CBtnEnh::AnimGetFramesRate()
{
	short result;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimSetFramesRate(short nRate)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nRate);
	return result;
}

short CBtnEnh::AnimGetFramesCount()
{
	short result;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimShowFrame(short nFrame)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x87, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nFrame);
	return result;
}

long CBtnEnh::AnimPause()
{
	long result;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimResume()
{
	long result;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimInvertPlay()
{
	long result;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CBtnEnh::ClearButtonCache()
{
	InvokeHelper(0x93, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CBtnEnh::GetValueEx()
{
	short result;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CBtnEnh::SetValueEx(short nValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nValue);
}

long CBtnEnh::GetButtonCacheSize()
{
	long result;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CBtnEnh::GetVersion()
{
	CString result;
	InvokeHelper(0xb6, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CBtnEnh::GetEdition()
{
	CString result;
	InvokeHelper(0xb7, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CBtnEnh::SetTotalTransparentFactor(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CBtnEnh::RefreshTransparentControl()
{
	InvokeHelper(0xba, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh::EnableButtonCache(BOOL bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CBtnEnh::SetCustomPaintFunction(long pFunction)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pFunction);
}

void CBtnEnh::SetClipChildren(BOOL bSet)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bSet);
}

long CBtnEnh::GetControlBitmap(long nImage)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xde, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nImage);
	return result;
}

void CBtnEnh::EnableDrawGdiPlus(BOOL bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x112, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CBtnEnh::SetFontPropertiesEx(long nTextPos, LPCTSTR strFacename, float nSize, BOOL bBold, BOOL bItalic, BOOL bUnderline, BOOL bStrikethrough)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_R4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x113, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nTextPos, strFacename, nSize, bBold, bItalic, bUnderline, bStrikethrough);
}

void CBtnEnh::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
